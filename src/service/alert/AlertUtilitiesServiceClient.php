<?php
namespace oppo\service\alert;
/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


class AlertUtilitiesServiceClient implements \oppo\service\alert\AlertUtilitiesServiceIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function SendEmail(array $to, array $cc, $subject, $content, $attach, $attachTitle)
  {
    $this->send_SendEmail($to, $cc, $subject, $content, $attach, $attachTitle);
  }

  public function send_SendEmail(array $to, array $cc, $subject, $content, $attach, $attachTitle)
  {
    $args = new \oppo\service\alert\AlertUtilitiesService_SendEmail_args();
    $args->to = $to;
    $args->cc = $cc;
    $args->subject = $subject;
    $args->content = $content;
    $args->attach = $attach;
    $args->attachTitle = $attachTitle;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'SendEmail', TMessageType::ONEWAY, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('SendEmail', TMessageType::ONEWAY, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }
  public function SendHTMLEmail(array $to, array $cc, $subject, $content, $attach, $attachTitle)
  {
    $this->send_SendHTMLEmail($to, $cc, $subject, $content, $attach, $attachTitle);
  }

  public function send_SendHTMLEmail(array $to, array $cc, $subject, $content, $attach, $attachTitle)
  {
    $args = new \oppo\service\alert\AlertUtilitiesService_SendHTMLEmail_args();
    $args->to = $to;
    $args->cc = $cc;
    $args->subject = $subject;
    $args->content = $content;
    $args->attach = $attach;
    $args->attachTitle = $attachTitle;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'SendHTMLEmail', TMessageType::ONEWAY, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('SendHTMLEmail', TMessageType::ONEWAY, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }
  public function SendSMS(array $to, $content, $template)
  {
    $this->send_SendSMS($to, $content, $template);
  }

  public function send_SendSMS(array $to, $content, $template)
  {
    $args = new \oppo\service\alert\AlertUtilitiesService_SendSMS_args();
    $args->to = $to;
    $args->content = $content;
    $args->template = $template;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'SendSMS', TMessageType::ONEWAY, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('SendSMS', TMessageType::ONEWAY, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }
  public function SendWxNotice(array $to, $content, $template)
  {
    $this->send_SendWxNotice($to, $content, $template);
  }

  public function send_SendWxNotice(array $to, $content, $template)
  {
    $args = new \oppo\service\alert\AlertUtilitiesService_SendWxNotice_args();
    $args->to = $to;
    $args->content = $content;
    $args->template = $template;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'SendWxNotice', TMessageType::ONEWAY, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('SendWxNotice', TMessageType::ONEWAY, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }
  public function GetNowTime()
  {
    $this->send_GetNowTime();
    return $this->recv_GetNowTime();
  }

  public function send_GetNowTime()
  {
    $args = new \oppo\service\alert\AlertUtilitiesService_GetNowTime_args();
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'GetNowTime', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('GetNowTime', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_GetNowTime()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\oppo\service\alert\AlertUtilitiesService_GetNowTime_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \oppo\service\alert\AlertUtilitiesService_GetNowTime_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("GetNowTime failed: unknown result");
  }

  public function PrintVersion()
  {
    $this->send_PrintVersion();
    return $this->recv_PrintVersion();
  }

  public function send_PrintVersion()
  {
    $args = new \oppo\service\alert\AlertUtilitiesService_PrintVersion_args();
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'PrintVersion', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('PrintVersion', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_PrintVersion()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\oppo\service\alert\AlertUtilitiesService_PrintVersion_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \oppo\service\alert\AlertUtilitiesService_PrintVersion_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("PrintVersion failed: unknown result");
  }

}


